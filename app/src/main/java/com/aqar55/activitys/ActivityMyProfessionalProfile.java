package com.aqar55.activitys;import android.annotation.SuppressLint;import android.app.Activity;import android.app.DatePickerDialog;import android.app.Dialog;import android.app.ProgressDialog;import android.content.Context;import android.content.Intent;import android.content.pm.PackageManager;import android.database.Cursor;import android.graphics.Bitmap;import android.media.MediaMetadataRetriever;import android.media.MediaScannerConnection;import android.net.Uri;import android.os.AsyncTask;import android.os.Build;import android.os.Bundle;import android.os.Environment;import android.os.Handler;import android.os.Message;import android.os.PowerManager;import android.provider.OpenableColumns;import android.support.annotation.NonNull;import android.support.annotation.Nullable;import android.support.v4.app.ActivityCompat;import android.support.v4.content.ContextCompat;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.util.Log;import android.view.Gravity;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.Window;import android.view.WindowManager;import android.widget.AdapterView;import android.widget.EditText;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.Spinner;import android.widget.TextView;import android.widget.Toast;import com.bumptech.glide.Glide;import com.google.android.gms.maps.model.LatLng;import com.netcompss.ffmpeg4android.CommandValidationException;import com.netcompss.ffmpeg4android.GeneralUtils;import com.netcompss.loader.LoadJNI;import com.squareup.picasso.Picasso;import org.apache.commons.io.FileUtils;import java.io.ByteArrayOutputStream;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.net.HttpURLConnection;import java.net.URL;import java.text.DateFormat;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Locale;import java.util.Random;import java.util.TimeZone;import butterknife.BindView;import butterknife.ButterKnife;import butterknife.OnClick;import com.aqar55.R;import com.aqar55.adapters.Add_Image_property_detail_business_Adapter;import com.aqar55.adapters.SpinnerCategoryList;import com.aqar55.adapters.SpinnerSubCategoryList;import com.aqar55.adapters.TinyArrayAdapter;import com.aqar55.constant.Constants;import com.aqar55.helper.BaseManager;import com.aqar55.helper.ChangeImageRotation;import com.aqar55.helper.ImageController;import com.aqar55.helper.ItemOffsetDecoration;import com.aqar55.helper.ModelManager;import com.aqar55.helper.PermissionManager;import com.aqar55.helper.Toaster;import com.aqar55.helper.Utils;import com.aqar55.model.DataGenerator;import com.aqar55.model.GetUserDetails;import com.aqar55.model.PictureVideoModel;import com.aqar55.model.ProfessionalDataResponse;import com.aqar55.model.ProfessionalResponse;import com.aqar55.model.SubCatResponse;import com.aqar55.model.TotalPropertyOfUserModel;import com.aqar55.retrofit.Api;import com.aqar55.retrofit.ApiClientConnection;import com.aqar55.utill.Config;import com.aqar55.utill.FileUtil;import com.aqar55.utill.MyDialog;import okhttp3.MediaType;import okhttp3.MultipartBody;import okhttp3.RequestBody;import retrofit2.Call;import retrofit2.Callback;import retrofit2.Response;import static android.Manifest.permission.CAMERA;import static android.Manifest.permission.READ_EXTERNAL_STORAGE;import static com.aqar55.helper.ImageController.GALLERY_REQUEST;import static com.aqar55.helper.ImageController.GALLERY_REQUEST_MENU;import static com.aqar55.helper.ImageController.REQUEST_IMAGE_CAPTURE;import static com.aqar55.helper.ImageController.REQUEST_IMAGE_CAPTURE_MENU;import static com.aqar55.helper.ImageController.VIDEO_CAMERA_CODE;import static com.aqar55.helper.ImageController.VIDEO_REQUEST_CODE;public class ActivityMyProfessionalProfile extends AppCompatActivity {    private static final String TAG = ActivityMApMyProfileDetails.class.getSimpleName();    final Calendar myCalendar = Calendar.getInstance();    private final int REQUEST_PERMISSION_CAMERA_STORAGE = 101;    private final int PLACE_AUTOCOMPLETE_REQUEST_CODE = 101;    private final int VID_COMPRESS_REQ_CODE = 16;    private final int CAMERA_REQ_CODE = 10;    private final int GALLERY_REQ_CODE = 12;    private boolean isSelectedStatus, isCategory, isSubCategory;    Bitmap retrievedImage = null;    ByteArrayOutputStream stream = new ByteArrayOutputStream();    View view;    Add_Image_property_detail_business_Adapter add_image_property_detail_business_adapter;    @BindView(R.id.iv_profile)    ImageView ivProfile;    @BindView(R.id.recyclerView2)    RecyclerView recyclerView;    @BindView(R.id.spinner_active)    Spinner spinnerActive;    @BindView(R.id.tv_active)    TextView tvActive;    @BindView(R.id.tv_prof_cat)    TextView tvCategory;    @BindView(R.id.spinner_category)    Spinner spinnerCategory;    @BindView(R.id.tv_prof_sub_cat)    TextView tvSubCat;    @BindView(R.id.spinner_sub_cat)    Spinner getSpinnerSubCategory;    @BindView(R.id.tv_professionalid)    TextView tvProfessionalid;    //    @BindView(R.id.tv_active)    TextView tv_active;    //    @BindView(R.id.tv_prof_cat)    TextView tv_prof_cat;    //    @BindView(R.id.tv_prof_sub_cat)    TextView tv_prof_sub_cat;    //COMPRESSION VARIABLES    @BindView(R.id.tv_date)    TextView tvDate;    @BindView(R.id.tvId)    TextView tvId;    @BindView(R.id.tvName)    TextView tvName;    @BindView(R.id.edt_name)    EditText edtName;    @BindView(R.id.iv_video)    ImageView ivVideo;    @BindView(R.id.tv_title)    TextView tvTitle;    @BindView(R.id.iv_compress_video)    ImageView ivCompressVideo;    //auto place Address    @BindView(R.id.chat_imageview_contact_admin)    ImageView ivDelete;    int menuLoop = 0;    private File tempFile = null;    //COMPRESSION VARIABLES    private String workFolder = null;    private String demoVideoFolder = null;    private String demoVideoPath = null;    private String demoVideoOutPath = null;    private String vkLogPath = null;    private boolean commandValidationFailedFlag = false;    private File compFile = null;    private String selectedImagePath = "";    private String mImagePath = "";    private PermissionManager permissionManager;    private LatLng latLng;    private ArrayList<PictureVideoModel> picturesList;    private ArrayList<PictureVideoModel> videosList;    private ArrayList<PictureVideoModel> videosListSender;    private ArrayList<PictureVideoModel> picturesListSender;    private List<File> imageUpladeList;    private String fromActivity = "";    private DatePickerDialog.OnDateSetListener onDateSetListener;    private TotalPropertyOfUserModel totalPropertyOfUserModelResponse;    private ArrayList<String> menuImageLIst;    private List<File> imageList = null;    private PhotoAdapter photoAdapter;    private String userIdd;    @SuppressLint("HandlerLeak")    private final Handler handler = new Handler() {        @Override        public void handleMessage(Message msg) {            if (msg != null) {                if (msg.what == 101) {                    if (msg.obj != null) {                        List<File> l = (List<File>) msg.obj;                        if (photoAdapter != null) {                            photoAdapter.setFileList(l);                            photoAdapter.notifyDataSetChanged();                        }                    }                }            }            super.handleMessage(msg);        }    };    private String categoryId = "";    private String subCatName = "";    private String userId = "";    private String[] active;    Spinner.OnItemSelectedListener onItemSelectedListenerActive = new AdapterView.OnItemSelectedListener() {        @Override        public void onItemSelected(AdapterView<?> adapterView, View view, int position, long l) {            if (isSelectedStatus)                tvActive.setText(active[position]);        }        @Override        public void onNothingSelected(AdapterView<?> adapterView) {            //  Toaster.toast("Please select the timeslot in which you want to add the menu");        }    };    private HashMap<String, Object> myProfessionalParameter;    private GetUserDetails.DataEntity responseData;    private SpinnerCategoryList spinnerCategoryList;    private SpinnerSubCategoryList spinnerSubCategoryList;    private List<ProfessionalDataResponse> professionalList;    private List<SubCatResponse.Data> professionalSubCatList;    Spinner.OnItemSelectedListener subCategoryList = new AdapterView.OnItemSelectedListener() {        @Override        public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {            if (isSubCategory) {                tvSubCat.setText(professionalSubCatList.get(position).getName());            }            subCatName = professionalSubCatList.get(position).getName();        }        @Override        public void onNothingSelected(AdapterView<?> parent) {        }    };    Spinner.OnItemSelectedListener categoryList = new AdapterView.OnItemSelectedListener() {        @Override        public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {            getPrepareSubCatList(professionalList.get(position));            if (isCategory) {                tvCategory.setText(professionalList.get(position).getName());            }            categoryId = professionalList.get(position).getId();        }        @Override        public void onNothingSelected(AdapterView<?> parent) {        }    };    public static Intent getIntent(Context context, String type, String userIdd, TotalPropertyOfUserModel UserModelResponse) {        Intent intent = new Intent(context, ActivityMyProfessionalProfile.class);        intent.putExtra("type", type);        intent.putExtra("usrType", userIdd);        intent.putExtra("kUserData", UserModelResponse);        return intent;    }    @Override    protected void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.layout_professional_profile);        ButterKnife.bind(this);        getWindow().setSoftInputMode(                WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);        initViews();        add_image_property_detail_business_adapter = new Add_Image_property_detail_business_Adapter(this);        LinearLayoutManager linearLayoutManager = new LinearLayoutManager(this);        permissionManager = new PermissionManager(this);        menuImageLIst = new ArrayList<>();        imageList = new ArrayList<>();        professionalList = new ArrayList<>();        professionalSubCatList = new ArrayList<>();        imageUpladeList = new ArrayList<>();        myProfessionalParameter = new HashMap<>();        photoAdapter = new PhotoAdapter(imageList);        RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false);        recyclerView.setLayoutManager(layoutManager);        recyclerView.setAdapter(photoAdapter);        photoAdapter.notifyDataSetChanged();        RecyclerView.ItemDecoration cItemDecoration = new ItemOffsetDecoration(this, R.dimen._5sdp);        recyclerView.addItemDecoration(cItemDecoration);        getIntentData();        initialSetUp();        getPrepareDataActive();        getPrepareDataCategory();        dobSelect();        prepareUi();    }    private void getIntentData() {        if (getIntent() != null) {            fromActivity = (String) getIntent().getStringExtra("type");            userIdd = getIntent().getStringExtra("usrType");            totalPropertyOfUserModelResponse = (TotalPropertyOfUserModel) getIntent().getSerializableExtra("kUserData");            if (fromActivity.equalsIgnoreCase("professional")) {                tvTitle.setText("My Professional Profile");                tvId.setText(getString(R.string.professional_id));                tvName.setText(getString(R.string.professional_name));                userId = BaseManager.getDataFromPreferences("userIdProfessional", String.class);                if(totalPropertyOfUserModelResponse!=null)              if(totalPropertyOfUserModelResponse.getUser()!=null)                if (!totalPropertyOfUserModelResponse.getUser().getProfessionalprofile()) {                    prepareDataByApi(ModelManager.modelManager().getCurrentUser().getId());                } else {                    prepareDataByApi(userIdd);                }            } else {                tvTitle.setText("My Business Profile");                tvId.setText(getString(R.string.business_id));                tvName.setText(getString(R.string.business_name));                userId = BaseManager.getDataFromPreferences("userIdBusiness", String.class);                if(totalPropertyOfUserModelResponse.getUser()!=null)                if (!totalPropertyOfUserModelResponse.getUser().getBusinessprofile()) {                    //prepareDataByApi(ModelManager.modelManager().getCurrentUser().getId());                } else {                    prepareDataByApi(userIdd);                }            }        }    }    private void initViews() {        tv_active = findViewById(R.id.tv_active);        tv_prof_cat = findViewById(R.id.tv_prof_cat);    }    private void prepareDataByApi(String user_Id) {        Api api = ApiClientConnection.getInstance().createApiInterface();        Call<GetUserDetails> call = api.getUserDetails(user_Id);        call.enqueue(new Callback<GetUserDetails>() {            @Override            public void onResponse(Call<GetUserDetails> call, Response<GetUserDetails> response) {                //Toast.makeText(getContext(), ""+response.body().getResponseMessage(), Toast.LENGTH_SHORT).show();                Log.d(TAG, "onResponse: " + response.body());                if (response.isSuccessful()) {                    if (response.body() != null && response.body().getData() != null) {                        responseData = response.body().getData();                        setDataToViews(response);                    }                }            }            @Override            public void onFailure(Call<GetUserDetails> call, Throwable t) {            }        });    }    private void setDataToViews(Response<GetUserDetails> response) {        // tvDate.setText(response.body().getData().getMembersince());        edtName.setText(response.body().getData().getFullname());        tvActive.setText(response.body().getData().getStatus());        tvCategory.setText(response.body().getData().getCategory());        tvSubCat.setText(response.body().getData().getSubcategory());        if(response.body().getData().getProfileimage()!=null&&!response.body().getData().getProfileimage().isEmpty()) {            Thread thread = new Thread() {                @Override                public void run() {                    super.run();                        String file_name = String.format(Locale.getDefault(), "menu%03d.jpg", 0);                        String file_path = ActivityMyProfessionalProfile.this.getFilesDir().getAbsolutePath() + "/Temp";                        final File file = new File(file_path, file_name);                        try {                            FileUtils.copyURLToFile(new URL(response.body().getData().getProfileimage()), file);                            mImagePath=file.getAbsolutePath();                        } catch (IOException e) {                            e.printStackTrace();                        }                    }            };            thread.start();            try {                thread.join();            } catch (InterruptedException e) {                e.printStackTrace();            }        }//        if(response.body().getData().getLiked()==true){////        }else {////        }        if (!response.body().getData().getProfileimage().isEmpty())            Picasso.get().load(response.body().getData().getProfileimage()).resize(300, 250).centerCrop(Gravity.CENTER).into(ivProfile);        if (!response.body().getData().getImagesfile().isEmpty())            new Thread(() -> {                for (menuLoop = 0; menuLoop < response.body().getData().getImagesfile().size(); menuLoop++) {                    try {                        String file_name = String.format(Locale.getDefault(), "menu%03d.jpg", menuLoop);                        String file_path = getFilesDir().getAbsolutePath() + "/Temp";                        final File file = new File(file_path, file_name);                        try {                            FileUtils.copyURLToFile(new URL(response.body().getData().getImagesfile().get(menuLoop).getImage()), file);                            imageList.add(file);                            Message message = new Message();                            message.obj = imageList;                            message.what = 101;                            handler.sendMessage(message);                        } catch (Exception e) {                            // showProgress(false);                            e.printStackTrace();                        }                    } catch (Exception e) {                        // showProgress(false);                        e.printStackTrace();                    }                }            }).start();        try {            retriveVideoFrameFromVideo(response.body().getData().getVideosfile().get(0).getVideo());        } catch (Throwable throwable) {            throwable.printStackTrace();        }    }    private void prepareUi() {        tvProfessionalid.setText(ModelManager.modelManager().getCurrentUser().getProfessionalid());    }    private void initialSetUp() {        picturesList = new ArrayList<>();        videosList = new ArrayList<>();        videosListSender = new ArrayList<>();        picturesListSender = new ArrayList<>();    }    private void dobSelect() {        //server comes format ?        String server_format1 = "2019-04-04T13:27:36.591Z";    //server comes format ?        String myFormat = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"; //In which you need put here        SimpleDateFormat sdf = new SimpleDateFormat(myFormat, Locale.US);        sdf.setTimeZone(TimeZone.getTimeZone("GMT"));        try {            Date date = sdf.parse((ModelManager.modelManager().getCurrentUser().getCreated()));            System.out.println(date);            String dateText = DateFormat.getDateInstance(DateFormat.MEDIUM).format(date);            String your_format = new SimpleDateFormat("dd/MM/yyyy HH:mm").format(date);            System.out.println(your_format);            String[] splitted = your_format.split(" ");            tvDate.setText(your_format);            // Now you can set the TextView here        } catch (Exception e) {            System.out.println(e.toString()); //date format error        }    }    public Bitmap retriveVideoFrameFromVideo(String videoPath) throws Throwable {        Bitmap bitmap = null;        MediaMetadataRetriever mediaMetadataRetriever = null;        try {            mediaMetadataRetriever = new MediaMetadataRetriever();            if (Build.VERSION.SDK_INT >= 14)                mediaMetadataRetriever.setDataSource(videoPath, new HashMap<String, String>());            else                mediaMetadataRetriever.setDataSource(videoPath);            //   mediaMetadataRetriever.setDataSource(videoPath);            bitmap = mediaMetadataRetriever.getFrameAtTime();            ivCompressVideo.setImageBitmap(bitmap);        } catch (Exception e) {            e.printStackTrace();            throw new Throwable("Exception in retriveVideoFrameFromVideo(String videoPath)" + e.getMessage());        } finally {            if (mediaMetadataRetriever != null) {                mediaMetadataRetriever.release();            }        }        return bitmap;    }//subcat api calling here    private void getPrepareSubCatList(ProfessionalDataResponse professionalDataResponse) {        MyDialog.getInstance(this).showDialog(this);        Api api = ApiClientConnection.getInstance().createApiInterface();        final Call<SubCatResponse> getCategoryList = api.getSubCatList(professionalDataResponse.getId());        getCategoryList.enqueue(new Callback<SubCatResponse>() {            @Override            public void onResponse(@NonNull Call<SubCatResponse> call, @NonNull Response<SubCatResponse> response) {                if (response.isSuccessful()) {                    MyDialog.getInstance(ActivityMyProfessionalProfile.this).hideDialog();                    if (response.body() != null) {                        if (response.body().getStatus().equalsIgnoreCase("success")) {                            professionalSubCatList = response.body().getData();                            spinnerSubCategoryList = new SpinnerSubCategoryList(ActivityMyProfessionalProfile.this,                                    android.R.layout.simple_spinner_dropdown_item, professionalSubCatList);                            getSpinnerSubCategory.setAdapter(spinnerSubCategoryList);                            getSpinnerSubCategory.setOnItemSelectedListener(subCategoryList);                        } else {                            //Toaster.toast(response.body().getResponseMessage());                        }                    }                }            }            @Override            public void onFailure(Call<SubCatResponse> call, Throwable t) {                MyDialog.getInstance(ActivityMyProfessionalProfile.this).hideDialog();                t.fillInStackTrace();            }        });    }    //api calling for category    private void getPrepareDataCategory() {        MyDialog.getInstance(this).showDialog(this);        Api api = ApiClientConnection.getInstance().createApiInterface();        final Call<ProfessionalResponse> getCategoryList = api.getCategoryList();        getCategoryList.enqueue(new Callback<ProfessionalResponse>() {            @Override            public void onResponse(@NonNull Call<ProfessionalResponse> call, @NonNull Response<ProfessionalResponse> response) {                if (response.isSuccessful()) {                    MyDialog.getInstance(ActivityMyProfessionalProfile.this).hideDialog();                    if (response != null) {                        if (response.body().getStatus().equalsIgnoreCase("success")) {                            professionalList = response.body().getData();                            ProfessionalDataResponse professionalDataResponse = new ProfessionalDataResponse();                            professionalDataResponse.setName("Select Category");                            professionalList.add(0, professionalDataResponse);                            spinnerCategoryList = new SpinnerCategoryList(ActivityMyProfessionalProfile.this,                                    android.R.layout.simple_spinner_dropdown_item, professionalList);                            spinnerCategory.setAdapter(spinnerCategoryList);                            spinnerCategory.setOnItemSelectedListener(categoryList);                        } else {                            Toaster.toast(response.body().getResponseMessage());                        }                    }                }            }            @Override            public void onFailure(Call<ProfessionalResponse> call, Throwable t) {                MyDialog.getInstance(ActivityMyProfessionalProfile.this).hideDialog();            }        });    }    private void getPrepareDataActive() {        active = DataGenerator.getAccountStatus();        TinyArrayAdapter<String> slotAdapter = new TinyArrayAdapter<String>(this, android.R.layout.simple_spinner_dropdown_item, active);        spinnerActive.setAdapter(slotAdapter);        spinnerActive.setSelection(0);        spinnerActive.setOnItemSelectedListener(onItemSelectedListenerActive);    }    @OnClick({R.id.ivBack, R.id.tvSearchProf, R.id.l_pic_image, R.id.imageView22, R.id.tv_active,            R.id.tv_prof_cat, R.id.tv_prof_sub_cat, R.id.tv_date, R.id.const_layout_pick_video,            R.id.chat_imageview_contact_admin})    public void onClick(View view) {        switch (view.getId()) {            case R.id.tvSearchProf:                if (isValid()) {                    HashMap<String, Object> data = prepareAllData();                    startActivity(ActivityMApMyProfileDetails.getIntent(this, data, responseData));                }                break;            case R.id.ivBack:                this.finish();                break;            case R.id.l_pic_image:                checkPermission(2);                break;            case R.id.imageView22:                checkPermission(1);                break;            case R.id.tv_active:                isSelectedStatus = true;                spinnerActive.performClick();                break;            case R.id.tv_prof_cat:                isCategory = true;                spinnerCategory.performClick();                break;            case R.id.tv_prof_sub_cat:                isSubCategory = true;                getSpinnerSubCategory.performClick();                break;            case R.id.const_layout_pick_video:                pickVideo();                break;            case R.id.chat_imageview_contact_admin:                showConfirmation();                break;        }    }    private void showConfirmation() {        final android.app.Dialog dialog = new android.app.Dialog(this);        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);        dialog.setContentView(R.layout.dialog_delete);        dialog.setCanceledOnTouchOutside(true);        dialog.show();        dialog.findViewById(R.id.btn_signup).setOnClickListener(v -> {            dialog.dismiss();        });        dialog.findViewById(R.id.btn_login).setOnClickListener(v -> {            dialog.dismiss();            deleteProfile();        });        dialog.setCanceledOnTouchOutside(false);        dialog.setCancelable(false);    }    //delete profile for business and normal professional    private void deleteProfile() {        Api api = ApiClientConnection.getInstance().createApiInterface();        Call<GetUserDetails> call = api.deleteProfessionalOrBusinessMap(ModelManager.modelManager().getCurrentUser().getId(), userIdd);        call.enqueue(new Callback<GetUserDetails>() {            @Override            public void onResponse(Call<GetUserDetails> call, Response<GetUserDetails> response) {                responseData = response.body().getData();                if (response.isSuccessful()) {                    Log.d(TAG, "onResponse: " + response.body());                    startActivity(new Intent(ActivityMyProfessionalProfile.this, MainActivity.class));                }            }            @Override            public void onFailure(Call<GetUserDetails> call, Throwable t) {                Toaster.toast(t.getMessage());            }        });    }    private HashMap<String, Object> prepareAllData() {        myProfessionalParameter.put("fromActivity", fromActivity);        if (imageList.isEmpty()) {            myProfessionalParameter.put("imagesFile[]", "");        } else {            myProfessionalParameter.put("imagesFile[]", imageList);        }        myProfessionalParameter.put("status", tvActive.getText().toString());        myProfessionalParameter.put("professionalId", tvProfessionalid.getText().toString());        myProfessionalParameter.put("birthDate", tvDate.getText().toString());        myProfessionalParameter.put("fullName", edtName.getText().toString());        if (videosListSender.isEmpty()) {            myProfessionalParameter.put("videosFile", "");        } else {            myProfessionalParameter.put("videosFile", videosListSender.get(0).getImageVidFile());        }        if (mImagePath.isEmpty()) {            myProfessionalParameter.put("profileImage", "");        } else {            myProfessionalParameter.put("profileImage", getProfileImageFile());        }        myProfessionalParameter.put("category", tvCategory.getText().toString());        myProfessionalParameter.put("subCategory", tvSubCat.getText().toString());        myProfessionalParameter.put("memberSince", tvDate.getText().toString());        return myProfessionalParameter;    }    private boolean isValid() {        if (tv_active.getText().toString().isEmpty()) {            Toaster.toast("Please select status");            return false;        } else if (Utils.getProperText(tvDate).isEmpty()) {            Toaster.toast("Please select member since");            return false;        } else if (Utils.getProperText(edtName).isEmpty()) {            Toaster.toast("Please enter Name");            return false;        } else if (tvProfessionalid.getText().toString().isEmpty()) {            Toaster.toast("Please select Video");            return false;        } else if (tv_prof_cat.getText().toString().isEmpty()) {            Toaster.toast("Please select category");            return false;        } else if (tvSubCat.getText().toString().isEmpty()) {            Toaster.toast("Please select sub category");            return false;        }        return true;    }    private void pickVideo() {        openBottomSheetBannerVideo();    }    private void instanceDate() {        new DatePickerDialog(this, R.style.DialogTheme, onDateSetListener, myCalendar                .get(Calendar.YEAR), myCalendar.get(Calendar.MONTH),                myCalendar.get(Calendar.DAY_OF_MONTH)).show();    }    //open bottomsheet for video    private void openBottomSheetBannerVideo() {        View view = getLayoutInflater().inflate(R.layout.custom_bottonsheet_layout, null);        final Dialog mBottomSheetDialog = new Dialog(this, R.style.MaterialDialogSheet);        mBottomSheetDialog.setContentView(view);        mBottomSheetDialog.setCancelable(true);        mBottomSheetDialog.getWindow().setLayout(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);        mBottomSheetDialog.getWindow().setGravity(Gravity.BOTTOM);        mBottomSheetDialog.show();        view.findViewById(R.id.camera_view).setOnClickListener(v -> {            dispatchVideos();   //VID_COMPRESS_REQ_CODE: VIDEO VIA GALLERY            mBottomSheetDialog.dismiss();        });        view.findViewById(R.id.gallery_view).setOnClickListener(v -> {            dispatchVideos(); // VID_COMPRESS_REQ_CODE: VIDEO VIA GALLERY            mBottomSheetDialog.dismiss();        });        view.findViewById(R.id.cancel_view).setOnClickListener(v -> {            //  tvEditIntroduction.setText("Edit");            mBottomSheetDialog.dismiss();        });    }    private void dispatchVideos() {        Intent intent = new Intent(Intent.ACTION_GET_CONTENT);        intent.setType("video/*");        startActivityForResult(intent, VID_COMPRESS_REQ_CODE);    }    protected ArrayList<PictureVideoModel> doInBackground(ArrayList<PictureVideoModel>... arrayLists) {        ArrayList<Bitmap> bitmapList = new ArrayList<>();        ArrayList<PictureVideoModel> arrayList = new ArrayList<>();        arrayList = arrayLists[0];        if (arrayList != null && arrayList.size() > 0) {            for (int i = 0; i < arrayList.size(); i++) {                try {                    PictureVideoModel model = arrayList.get(i);                    String videoPath = model.getEvent_image_video_url();                    File file = loadFileVideos(videoPath);                    if (file != null) {                        Log.w(TAG, "Video File PATH: [" + i + "] : " + file.getAbsolutePath());                        Uri imageUri = Uri.fromFile(file);                        model.setImageVidFile(file);                        model.setImageVidUri(imageUri);                    } else {                        Log.w(TAG, "Video File PATH: [" + i + "] : " + null);                        model.setImageVidFile(null);                        model.setImageVidUri(null);                    }                } catch (Exception e) {                    e.printStackTrace();                }            }            return arrayList;        } else {            return arrayList;        }    }    /*******************     *  //VIDEOS     *  **********************/    private File loadFileVideos(String urlOfFileLink) {        File returnFile = null;        try {            Log.w(TAG, "Video urlOfFileLink: " + urlOfFileLink);            //set the download URL, a url that points to a file on the internet            //this is the file to be downloaded            //http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerEscapes.mp4            URL url = new URL(urlOfFileLink);            //create the new connection            HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();            //set up some things on the connection            urlConnection.setRequestMethod("GET");//            urlConnection.setDoOutput(true);            //and connect!            urlConnection.connect();            //set the path where we want to save the file            //in this case, going to save it on the root directory of the            //sd card.            File SDCardRoot = Environment.getExternalStorageDirectory();            // *********************            String mediaDirectory                    = Environment.getExternalStorageDirectory()                    + File.separator + Constants.kDefaultAppName                    + File.separator + "Files" + File.separator;            File mediaStorageDir = new File(mediaDirectory);            // Create the storage directory if it does not exist            if (!mediaStorageDir.exists() && !mediaStorageDir.mkdirs()) {                Log.w(TAG, "Failed to create directory");            }            // Create an image fileName            SimpleDateFormat s = new SimpleDateFormat("yyyyMMdd_HHmmmss", Locale.getDefault());            s.setTimeZone(TimeZone.getTimeZone("GMT"));            String timeStamp = s.format(new Date());            Random rand = new Random();            int n = rand.nextInt(500) + 1;            String imageFileName = "VID_" + timeStamp + n + ".mp4";            File imgFile = new File(                    mediaStorageDir.getAbsolutePath() + File.separator + imageFileName);            //   *********************************            //create a new file, specifying the path, and the filename            //which we want to save the file as.//            File file = new File(SDCardRoot,imageFileName);            File file = imgFile;            //this will be used to write the downloaded data into the file we created            FileOutputStream fileOutput = new FileOutputStream(imgFile);            //this will be used in reading the data from the internet            InputStream inputStream = urlConnection.getInputStream();            //this is the total size of the file            int totalSize = urlConnection.getContentLength();            //variable to store total downloaded bytes            int downloadedSize = 0;            //create a buffer...            byte[] buffer = new byte[1024];            int bufferLength = 0; //used to store a temporary size of the buffer            //now, read through the input buffer and write the contents to the file            while ((bufferLength = inputStream.read(buffer)) > 0) {                //add the data in the buffer to the file in the file output stream (the file on the sd card                fileOutput.write(buffer, 0, bufferLength);                //add up the size so we know how much is downloaded                downloadedSize += bufferLength;                //this is where you would do something to report the prgress, like this maybe//                updateProgress(downloadedSize, totalSize);            }            returnFile = file;            Log.w(TAG, "Video file Path: " + file.getAbsolutePath());            //close the output stream when done            fileOutput.close();//catch some possible errors...        } catch (Exception e) {            e.printStackTrace();        }        return returnFile;    }    private void checkPermission(int i) {        if (ContextCompat.checkSelfPermission(this, CAMERA) == PackageManager.PERMISSION_GRANTED                && ContextCompat.checkSelfPermission(this, READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {            openBottomSheetBanner(i);        } else if (ActivityCompat.shouldShowRequestPermissionRationale(this, CAMERA) && ActivityCompat.shouldShowRequestPermissionRationale(this, READ_EXTERNAL_STORAGE)) {            // We've been denied once before. Explain why we need the permission, then ask again.            Utils.showDialog(this, "Camera & Gallary permissions are required to upload profile images!", "Ask Permission", "Discard", (dialog, which) -> {                if (which == -1)                    permissionManager.requestPermission(new String[]{CAMERA, READ_EXTERNAL_STORAGE}, REQUEST_PERMISSION_CAMERA_STORAGE);                else                    dialog.dismiss();            });        } else {            // We've never asked. Just do it.            permissionManager.requestPermission(new String[]{CAMERA, READ_EXTERNAL_STORAGE}, REQUEST_PERMISSION_CAMERA_STORAGE);        }    }    private void openBottomSheetBanner(int i) {        View view = getLayoutInflater().inflate(R.layout.custom_bottonsheet_layout, null);        final Dialog mBottomSheetDialog = new Dialog(this, R.style.MaterialDialogSheet);        mBottomSheetDialog.setContentView(view);        mBottomSheetDialog.setCancelable(true);        mBottomSheetDialog.getWindow().setLayout(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);        mBottomSheetDialog.getWindow().setGravity(Gravity.BOTTOM);        mBottomSheetDialog.show();        view.findViewById(R.id.camera_view).setOnClickListener(v -> {            if (i == 1) {                //1 for menu images                ImageController.dispatchCameraMenuIntent(this);            } else if (i == 3) {                ImageController.dispatchGallaryIntentVideo(this);            } else {                //else as usual for profile                ImageController.dispatchCameraIntent(this);            }            mBottomSheetDialog.dismiss();        });        view.findViewById(R.id.gallery_view).setOnClickListener(v -> {            if (i == 1) {                //1 for menu images                ImageController.dispatchMenuGallaryIntent(this);            } else {                //else for profile image as usual                ImageController.dispatchGallaryIntent(this);            }            mBottomSheetDialog.dismiss();        });        view.findViewById(R.id.cancel_view).setOnClickListener(v -> mBottomSheetDialog.dismiss());    }    @Override    public void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (requestCode == REQUEST_IMAGE_CAPTURE && resultCode == RESULT_OK) {            File file = new File(ImageController.getCurrentPhotoPath());            mImagePath = file.getAbsolutePath();            Picasso.get().load(file).resize(300, 250).centerCrop(Gravity.CENTER).into(ivProfile);        } else if (requestCode == GALLERY_REQUEST && resultCode == RESULT_OK) {            Uri imageURI = data.getData();            String filepath = ImageController.getPath(this, imageURI);            File imageFile = new File(filepath);            mImagePath = imageFile.getAbsolutePath();            Picasso.get().load(imageFile).resize(300, 250).centerCrop(Gravity.CENTER).into(ivProfile);        } else if (requestCode == REQUEST_IMAGE_CAPTURE_MENU && resultCode == RESULT_OK) {            File file = new File(ImageController.getCurrentPhotoPath());            imageList.add(file);            photoAdapter.notifyDataSetChanged();        //    mImagePath = file.getAbsolutePath();            //Picasso.get().load(file).resize(300, 250).centerCrop(Gravity.CENTER).into(imageViewProfile);        } else if (requestCode == GALLERY_REQUEST_MENU && resultCode == RESULT_OK) {            Uri imageURI = data.getData();            String filepath = ImageController.getPath(this, imageURI);            File imageFile = new File(filepath);            imageList.add(imageFile);            photoAdapter.notifyDataSetChanged();            // = imageFile.getAbsolutePath();            // Picasso.get().load(imageFile).resize(300, 250).centerCrop(Gravity.CENTER).into(imageViewProfile);        } else if (requestCode == VIDEO_REQUEST_CODE && resultCode == RESULT_OK) {            Uri selectedImageUri = data.getData();        } else if (requestCode == VID_COMPRESS_REQ_CODE && resultCode == RESULT_OK) {            Uri uri = data.getData();            if (uri != null) {                Cursor cursor = getApplicationContext().getContentResolver().query(uri, null, null, null, null, null);                try {                    if (cursor != null && cursor.moveToFirst()) {                        String displayName = cursor.getString(                                cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));                        Log.i(TAG, "Display Name: " + displayName);                        int sizeIndex = cursor.getColumnIndex(OpenableColumns.SIZE);                        String size = null;                        if (!cursor.isNull(sizeIndex)) {                            size = cursor.getString(sizeIndex);                        } else {                            size = "Unknown";                        }                        Log.i(TAG, "Size: " + size);                        tempFile = FileUtil.saveTempFile(displayName, this, uri);                        //COMPRESSION STARTS                        scanFile(tempFile.getAbsolutePath());                        setUpFFMpeg4();                        startTransCodingCompressFFMP4();    // FF_M_PEG_4 ASYNC_TASK                    }                } finally {                    if (cursor != null) {                        cursor.close();                    }                }            }        }    }    public File getProfileImageFile() {        File file = null;        try {            ChangeImageRotation changeImageRotation = new ChangeImageRotation(this);            String imageUrl = changeImageRotation.setCapturedImage(mImagePath);            file = new File(imageUrl);        } catch (Exception e) {            e.printStackTrace();        }        return file;    }    private void setUpFFMpeg4() {//        demoVideoFolder = Environment.getExternalStorageDirectory().getAbsolutePath() + "/videokit/";//        demoVideoPath = demoVideoFolder + "in.mp4";        Log.w(TAG, getResources().getString(R.string.app_name) + " version: " + GeneralUtils.getVersionName(getApplicationContext()));        String workFolder_r = getApplicationContext().getFilesDir().getAbsolutePath() + "/";        //Log.i(TAG, "workFolder: " + workFolder);        vkLogPath = workFolder_r + "vk.log";        workFolder = workFolder_r;//        FileUtil.createApplicationFolder();        File f_main = new File(Environment.getExternalStorageDirectory(), File.separator + Config.VIDEO_COMPRESSOR_APPLICATION_DIR_NAME);        f_main.mkdirs();        File f_comp = new File(Environment.getExternalStorageDirectory(), File.separator + Config.VIDEO_COMPRESSOR_APPLICATION_DIR_NAME + Config.VIDEO_COMPRESSOR_COMPRESSED_VIDEOS_DIR);        f_comp.mkdirs();        File f_temp = new File(Environment.getExternalStorageDirectory(), File.separator + Config.VIDEO_COMPRESSOR_APPLICATION_DIR_NAME + Config.VIDEO_COMPRESSOR_TEMP_DIR);        f_temp.mkdirs();        demoVideoFolder = f_temp.getAbsolutePath() + "/";        demoVideoPath = demoVideoFolder + "in.mp4";        demoVideoOutPath = f_comp.getAbsolutePath() + "/";        Log.w(TAG, "workFolder: " + workFolder);        Log.w(TAG, "demoVideoFolder: " + demoVideoFolder);        Log.w(TAG, "demoVideoPath: " + demoVideoPath);        Log.w(TAG, "demoVideoOutPath: " + demoVideoOutPath);        GeneralUtils.copyLicenseFromAssetsToSDIfNeeded(this, workFolder);        GeneralUtils.copyDemoVideoFromAssetsToSDIfNeeded(this, demoVideoFolder);        int rc = GeneralUtils.isLicenseValid(getApplicationContext(), workFolder);        Log.i(TAG, "License check RC: " + rc);    }    //video compress    private void startTransCodingCompressFFMP4() {        Log.i(TAG, "run clicked.");        demoVideoPath = tempFile.getAbsolutePath();        scanFile(demoVideoPath);        Log.w(TAG, "demoVideoPath picked now: " + demoVideoPath);        if (GeneralUtils.checkIfFileExistAndNotEmpty(demoVideoPath)) {            new TransCodingBackground(this).execute();        } else {            Toast.makeText(getApplicationContext(), demoVideoPath + " not found", Toast.LENGTH_LONG).show();        }    }    // Returns true if Primary External Storage is available    private boolean isExternalStorageAvailable() {        String state = Environment.getExternalStorageState();        if (Environment.MEDIA_MOUNTED.equals(state)) {            return true;        } else {            this.runOnUiThread(new Runnable() {                @Override                public void run() {                    Toast.makeText(getApplicationContext(), "PRIMARY EXTERNAL STORAGE NOT MOUNTED.", Toast.LENGTH_SHORT).show();                }            });            return false;        }    }    //  METHOD: TO SCAN IMAGE FILE THAT IS CAPTURED CURRENTLY AND REFLECT IT IN GALLERY App OF DEVICE    private void scanFile(String path) {        MediaScannerConnection.scanFile(this, new String[]{path}, null,                (path1, uri) -> Log.i(TAG, "Finished scanning of " + path1));    }    private void setImagesVidsToList(int code, File file, Uri uri) {        PictureVideoModel pictureVideoModel = new PictureVideoModel();        switch (code) {            case REQUEST_IMAGE_CAPTURE:            case GALLERY_REQUEST:            case CAMERA_REQ_CODE: //CAMERA            case GALLERY_REQ_CODE: //GALLERY                pictureVideoModel.setImageVidUri(uri);                pictureVideoModel.setImageVidFile(file);                pictureVideoModel.setEvent_image_video_id("");                pictureVideoModel.setEvent_image_video_url("");                picturesListSender.add(pictureVideoModel);                Glide.with(getApplicationContext())                        .load(videosListSender.get(0).getImageVidUri())                        .into(ivCompressVideo);                break;            case VID_COMPRESS_REQ_CODE: // VIDEO VIA GALLERY                videosListSender.clear();                videosList.clear();                pictureVideoModel.setImageVidUri(uri);                pictureVideoModel.setImageVidFile(file);                pictureVideoModel.setEvent_image_video_id("");                pictureVideoModel.setEvent_image_video_url("");                videosList.add(pictureVideoModel);                videosListSender.add(pictureVideoModel);                Glide.with(getApplicationContext())                        .load(videosListSender.get(0).getImageVidUri())                        .into(ivCompressVideo);            case VIDEO_CAMERA_CODE:                videosListSender.clear();                videosList.clear();                pictureVideoModel.setImageVidUri(uri);                pictureVideoModel.setImageVidFile(file);                pictureVideoModel.setEvent_image_video_id("");                pictureVideoModel.setEvent_image_video_url("");                videosList.add(pictureVideoModel);                videosListSender.add(pictureVideoModel);                break;            case VIDEO_REQUEST_CODE:                videosList.clear();                pictureVideoModel.setImageVidUri(uri);                pictureVideoModel.setImageVidFile(file);                pictureVideoModel.setEvent_image_video_id("");                pictureVideoModel.setEvent_image_video_url("");                videosList.add(pictureVideoModel);                break;            default:                break;        }    }    private MultipartBody.Part videoPart() {        if (videosListSender.size() == 0) {            return null;        }        RequestBody profile_body = RequestBody.create(MediaType.parse("video/*"), videosListSender.get(0).getImageVidFile());        MultipartBody.Part menuPart = MultipartBody.Part.createFormData("video", videosListSender.get(0).getImageVidFile().getName(), profile_body);        return menuPart;    }    private List<MultipartBody.Part> morePart() {        List<MultipartBody.Part> list = new ArrayList<>();        imageUpladeList.clear();        imageUpladeList.addAll(imageList);        if (imageUpladeList.size() != 0) {            for (int i = 0; i < imageUpladeList.size(); i++) {                RequestBody profile_body = RequestBody.create(MediaType.parse("image/*"), imageUpladeList.get(i));                MultipartBody.Part menuPart = MultipartBody.Part.createFormData("files[]", imageUpladeList.get(i).getName(), profile_body);                list.add(menuPart);            }        }        return list;    }    class PhotoAdapter extends RecyclerView.Adapter<PhotoAdapter.ViewHolder> {        List<File> fileList;        private boolean isCancel = false;        PhotoAdapter(List<File> stringList) {            this.fileList = stringList;        }        public List<File> getFileList() {            return fileList;        }        public void setFileList(List<File> fileList) {            this.fileList = fileList;        }        @Override        public ViewHolder onCreateViewHolder(ViewGroup viewGroup, int viewType) {          /*  if (viewType == 1) {                view = LayoutInflater.from(this).inflate(R.layout.layout_upload_image_recycler, viewGroup, false);            } else {*/            view = LayoutInflater.from(ActivityMyProfessionalProfile.this).inflate(R.layout.layout_professional_recycler_item, viewGroup, false);            // }            return new PhotoAdapter.ViewHolder(view);        }        @Override        public void onBindViewHolder(ViewHolder holder, int position) {            if (fileList != null) {                File file = fileList.get(position);                if (Utils.isValidURL(String.valueOf(file))) {                    holder.ivMenuImage.setImageURI(Uri.fromFile(fileList.get(position)));                } else {                    holder.ivMenuImage.setImageURI(Uri.fromFile(fileList.get(position)));                }            }        }        @Override        public int getItemCount() {            return fileList.size();        }        public class ViewHolder extends RecyclerView.ViewHolder {            @BindView(R.id.imageView7)            ImageView ivMenuImage;            public ViewHolder(View itemView) {                super(itemView);                ButterKnife.bind(this, itemView);            }            @OnClick({R.id.imageView8})            void onClose(View view) {                switch (view.getId()) {                    case R.id.imageView8:                        if (photoAdapter != null) {                            if (photoAdapter.getFileList() != null && photoAdapter.getFileList().size() > 0) {                                photoAdapter.getFileList().remove(getAdapterPosition());                                notifyDataSetChanged();                                imageList = photoAdapter.getFileList();                                notifyDataSetChanged();                            }                        }                        break;                }            }        }    }    // FF_M_PEG_4 ASYNC_TASK    @SuppressLint("StaticFieldLeak")    public class TransCodingBackground extends AsyncTask<String, Integer, Integer> {        Activity _act;        String commandStr;        private ProgressDialog dialog;        //CONSTRUCTOR        TransCodingBackground(Activity act) {            _act = act;        }        @Override        protected void onPreExecute() {            dialog = new ProgressDialog(_act);            dialog.setTitle("Aqar 55");            Log.d(TAG, "Start video compression");            dialog.setMessage("Compressing Video ...");            dialog.setIndeterminate(true);            dialog.setCancelable(false);            dialog.show();        }        protected Integer doInBackground(String... paths) {            Log.i(TAG, "doInBackground started...");            // delete previous log            boolean isDeleted = GeneralUtils.deleteFileUtil(workFolder + "/vk.log");            Log.i(TAG, "vk deleted: " + isDeleted);            PowerManager powerManager = (PowerManager) _act.getSystemService(Activity.POWER_SERVICE);            @SuppressLint("InvalidWakeLockTag") PowerManager.WakeLock wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "VK_LOCK");            Log.d(TAG, "Acquire wake lock");            wakeLock.acquire();            /*///////////// Set Commands  /////*///          commandStr = "ffmpeg -y -i /sdcard/videokit/in.mp4 -strict experimental -s 320x240 -r 30 -aspect 3:4 -ab 48000 -ac 2 -ar 22050 -vcodec mpeg4 -b 2097152 /sdcard/videokit/out.mp4";//			commandStr ="ffmpeg -y -i /sdcard/videokit/in.mp4 -strict experimental -vcodec libx264 -preset ultrafast -crf 24 -acodec aac -ar 44100 -ac 2 -b:a 96k -s 320x240 -aspect 4:3 /sdcard/videokit/out3.mp4";//          String[] complexCommand = {"ffmpeg", "-y", "-i", "/sdcard/videokit/in.mp4", "-strict", "experimental", "-s", "160x120", "-r", "25", "-vcodec", "mpeg4", "-b", "150k", "-ab", "48000", "-ac", "2", "-ar", "22050", "/sdcard/videokit/out4.mp4"};            /*///////////// Set Commands  /////*/            String mediaDirectory = demoVideoOutPath;            // Create an image fileName            SimpleDateFormat s = new SimpleDateFormat("yyyyMMdd_HHmmmss", Locale.getDefault());            s.setTimeZone(TimeZone.getTimeZone("GMT"));            String timeStamp = s.format(new Date());            Random random = new Random();            int n = random.nextInt(500) + 1;            String imageFileName = "VID_" + timeStamp + n + ".mp4";            String out = "";            if (isExternalStorageAvailable()) {                File mediaStorageDir = new File(mediaDirectory);                // Create the storage directory if it does not exist                if (!mediaStorageDir.exists() && !mediaStorageDir.mkdirs()) {                    Log.w(TAG, "Failed to create directory");                }                compFile = new File(mediaStorageDir.getAbsolutePath() + File.separator + imageFileName);                out = compFile.getAbsolutePath();            }            Log.d(TAG, "demoVideo In Path command : " + demoVideoPath);            Log.d(TAG, "demoVideoOutPath command : " + demoVideoOutPath);            Log.w(TAG, "Out Path  : " + out);            String[] complexCommand = {"ffmpeg", "-y", "-i", demoVideoPath, "-strict", "experimental", "-s", "160x120", "-r", "25", "-vcodec", "mpeg4", "-b", "150k", "-ab", "48000", "-ac", "2", "-ar", "22050", out};            commandStr = "ffmpeg -y -i " + demoVideoPath + " -strict experimental -map_metadata 0:g -s 480x320 -r 25 -vcodec mpeg4 -b 320k -ab 48000 -ac 2 -ar 22050 " + out;            ///////////////////////////////////////////////////////////////////////            LoadJNI vk = new LoadJNI();            try {                // complex command//                vk.run(complexCommand, workFolder, getApplicationContext());                vk.run(GeneralUtils.utilConvertToComplex(commandStr), workFolder, getApplication());                // running without command validation                //vk.run(complexCommand, workFolder, getApplicationContext(), false);                // copying vk.log (internal native log) to the videokit folder                GeneralUtils.copyFileToFolder(vkLogPath, demoVideoFolder);            } catch (CommandValidationException e) {                Log.e(TAG, "vk run exeption.", e);                commandValidationFailedFlag = true;            } catch (Throwable e) {                Log.e(TAG, "vk run exeption.", e);            } finally {                if (wakeLock.isHeld())                    wakeLock.release();                else {                    Log.i(TAG, "Wake lock is already released, doing nothing");                }            }            Log.i(TAG, "doInBackground finished");            return 0;        }        @Override        protected void onPostExecute(Integer result) {            dialog.dismiss();            super.onPostExecute(result);            Log.i(TAG, "onPostExecute");            // finished Toast            String rc;            if (commandValidationFailedFlag) {                rc = "Command Vaidation Failed";            } else {                rc = GeneralUtils.getReturnCodeFromLog(vkLogPath);            }            final String status = rc;            runOnUiThread(new Runnable() {                public void run() {                    switch (status) {                        case "Transcoding Status: Finished OK":                            Log.w(TAG, "Compressed File path: " + compFile.getAbsolutePath());                            //COMPRESSION ENDS                            if (compFile != null) {                                Log.w(TAG, "Compression done!");                                File imageFile = compFile;                                scanFile(imageFile.getAbsolutePath());                                Uri uri1 = Uri.fromFile(imageFile);                                setImagesVidsToList(VID_COMPRESS_REQ_CODE, imageFile, uri1);                            } else {                                Log.w(TAG, "Compression not done!");                            }//                            Toast.makeText(EditImageVidsAct.this, "" + status, Toast.LENGTH_LONG).show();                            break;                        case "Transcoding Status: Failed":                            Toast.makeText(getApplicationContext(), "Check: " + vkLogPath + " for more information.", Toast.LENGTH_LONG).show();                            break;                        case "Transcoding Status: Stopped":                            Toast.makeText(getApplicationContext(), "Check: " + vkLogPath + " for more information.", Toast.LENGTH_LONG).show();                            break;                    }                }            });        }    }}